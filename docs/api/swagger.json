{
  "openapi": "3.0.0",
  "info": {
    "version": "{{VERSION}}",
    "title": "SMS Gateway for Androidâ„¢ Integration API",
    "description": "Provides the ability to send SMS messages by sending requests directly to a device or through a cloud server.",
    "contact": {
      "name": "SMSGate Support",
      "email": "support@sms-gate.app",
      "url": "https://github.com/capcom6"
    },
    "license": {
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
      "name": "Apache 2.0"
    }
  },
  "servers": [
    {
      "url": "http://device-ip:8080",
      "description": "Local Server"
    },
    {
      "url": "https://api.sms-gate.app/3rdparty/v1",
      "description": "Cloud Server"
    }
  ],
  "paths": {
    "/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a message",
        "description": "Adds a message to the queue for sending.",
        "operationId": "post-message",
        "parameters": [
          {
            "name": "skipPhoneValidation",
            "in": "query",
            "description": "If `true`, phone numbers will be used without validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "deviceActiveWithin",
            "in": "query",
            "description": "Filter devices active within the specified number of hours",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SendMessageRequest"
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/MessageStatusResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get message status",
        "description": "Returns the current status of a message by its ID.",
        "operationId": "get-message-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageStatusResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/device": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get devices",
        "description": "Returns a list of registered devices for the account.",
        "operationId": "get-devices",
        "responses": {
          "200": {
            "description": "A list of registered devices.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Health Check",
        "description": "Returns the health status of the service.",
        "operationId": "get-health",
        "responses": {
          "200": {
            "description": "Successfully retrieved health status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or health check failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        },
        "security": [],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhooks",
        "description": "List all registered webhooks. Note that webhooks registered in Local mode are distinct from those registered in Cloud mode.",
        "operationId": "get-webhooks",
        "responses": {
          "200": {
            "description": "A list of all registered webhooks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHook"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Register a webhook",
        "description": "Register a new webhook. If the `id` field is provided and a webhook with that ID already exists, it will be updated.",
        "operationId": "post-webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook successfully registered or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "callbacks": {
          "onEvent": {
            "{$request.body#/url}": {
              "post": {
                "requestBody": {
                  "description": "Event details.",
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebHookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server should return this HTTP status code if the data was received successfully."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Delete a specific webhook by its unique identifier.",
        "operationId": "delete-webhooks-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the webhook to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook successfully deleted; no content to return."
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "System",
          "Logs"
        ],
        "summary": "Get logs",
        "description": "Retrieve a list of log entries within a specified time range.",
        "operationId": "get-logs",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range for the logs to retrieve. Logs created after this timestamp will be included.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range for the logs to retrieve. Logs created before this timestamp will be included.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/messages/inbox/export": {
      "post": {
        "summary": "Request inbox messages export",
        "description": "Initiates the process of exporting inbox messages via webhooks. For each message, the `sms:received` webhook will be triggered. Webhooks will be triggered in no specific order.",
        "operationId": "post-messages-inbox-export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "since": {
                    "type": "string",
                    "description": "The start of the time range to export.",
                    "format": "date-time",
                    "writeOnly": true
                  },
                  "until": {
                    "type": "string",
                    "description": "The end of the time range to export.",
                    "format": "date-time",
                    "writeOnly": true
                  },
                  "deviceId": {
                    "type": "string",
                    "description": "The ID of the device to export messages for. Not required for Local mode."
                  }
                },
                "required": [
                  "since",
                  "until",
                  "deviceId"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get settings",
        "description": "Returns current settings.",
        "operationId": "get-settings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SettingsResponse"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "summary": "Update settings",
        "description": "Updates settings. In Local mode, settings are applied to the current device; in Cloud/Private mode, they are applied to all devices in the account.\nIf a setting is omitted, it will not be updated.\nIf a value is set to `null`, it will be reset to its default value.",
        "operationId": "patch-settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Settings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SettingsResponse"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "servers": [
          {
            "url": "http://device-ip:8080",
            "description": "Local Server"
          },
          {
            "url": "https://api.sms-gate.app/3rdparty/v1",
            "description": "Cloud Server"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Devices"
    },
    {
      "name": "Logs"
    },
    {
      "name": "Messages"
    },
    {
      "name": "Settings"
    },
    {
      "name": "System"
    },
    {
      "name": "Webhooks"
    }
  ],
  "components": {
    "requestBodies": {
      "SendMessageRequest": {
        "description": "The request body for sending a message.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "description": "Basic authentication using login and password.",
        "scheme": "basic"
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "A generic error response containing an error message.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The error message describing the issue."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "MessageStatusResponse": {
        "description": "A response containing the status of a message.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageStatus"
            }
          }
        }
      },
      "SettingsResponse": {
        "description": "Current settings response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Settings"
            }
          }
        }
      }
    },
    "schemas": {
      "Device": {
        "type": "object",
        "title": "Device",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the device."
          },
          "name": {
            "type": "string",
            "description": "The name of the device."
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when the device was created.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp when the device was last updated.",
            "format": "date-time"
          },
          "lastSeen": {
            "type": "string",
            "description": "The timestamp when the device was last seen.",
            "format": "date-time"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pass",
              "fail",
              "warn"
            ],
            "description": "Overall status of the health check. Possible values: \"pass\", \"fail\", \"warn\"."
          },
          "version": {
            "type": "string",
            "description": "Current version of the service or application."
          },
          "releaseId": {
            "type": "integer",
            "description": "Specific release or deployment identifier of the service or application."
          },
          "checks": {
            "type": "object",
            "description": "Detailed health check results for specific components or features.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CheckDetail"
            }
          }
        }
      },
      "CheckDetail": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Human-readable explanation of the health check."
          },
          "observedUnit": {
            "type": "string",
            "description": "Unit of measurement for the observed value."
          },
          "observedValue": {
            "type": "integer",
            "description": "The result of the health check, represented as a number."
          },
          "status": {
            "type": "string",
            "enum": [
              "pass",
              "fail",
              "warn"
            ],
            "description": "Status of this specific check. Possible values: \"pass\", \"fail\", \"warn\"."
          }
        }
      },
      "WebHook": {
        "type": "object",
        "title": "WebHook",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the webhook.",
            "example": "vWPwfPE-13ajPGniCZgdK"
          },
          "deviceId": {
            "type": "string",
            "nullable": true,
            "description": "The unique identifier of the device the webhook is associated with.",
            "example": "PyDmBQZZXYmyxMwED8Fzy"
          },
          "event": {
            "type": "string",
            "enum": [
              "sms:received",
              "sms:sent",
              "system:ping",
              "sms:delivered",
              "sms:failed",
              "sms:data-received"
            ],
            "description": "The type of event being reported.",
            "example": "sms:received"
          },
          "url": {
            "type": "string",
            "description": "The URL to which the event data will be POSTed.",
            "format": "uri",
            "example": "https://webhook.site/0e07d6e1-d5f0-4d18-b340-d22e8a272ba0"
          }
        },
        "required": [
          "event",
          "url"
        ]
      },
      "WebHookEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the webhook event."
          },
          "webhookId": {
            "type": "string",
            "description": "The identifier of the webhook configuration that triggered this event."
          },
          "deviceId": {
            "type": "string",
            "description": "The unique identifier of the device."
          },
          "event": {
            "type": "string",
            "enum": [
              "sms:received",
              "sms:sent",
              "system:ping",
              "sms:delivered",
              "sms:failed"
            ],
            "description": "The type of event that triggered the webhook."
          },
          "payload": {
            "description": "The data associated with the event.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SmsReceivedPayload"
              },
              {
                "$ref": "#/components/schemas/SmsSentPayload"
              },
              {
                "$ref": "#/components/schemas/SmsDeliveredPayload"
              },
              {
                "$ref": "#/components/schemas/SmsFailedPayload"
              },
              {
                "$ref": "#/components/schemas/SystemPingPayload"
              },
              {
                "$ref": "#/components/schemas/SmsDataReceivedPayload"
              }
            ]
          }
        }
      },
      "SmsReceivedPayload": {
        "title": "SmsReceivedPayload",
        "description": "Payload of `sms:received` event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsEventPayload"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "The content of the SMS message received."
              },
              "receivedAt": {
                "type": "string",
                "description": "The timestamp when the SMS message was received.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "SmsEventPayload": {
        "type": "object",
        "title": "SmsEventPayload",
        "description": "Base payload for SMS-related events.",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique identifier of the SMS message."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the sender (for incoming messages) or recipient (for outgoing messages)."
          },
          "simNumber": {
            "type": "integer",
            "nullable": true,
            "description": "The SIM card number that sent the SMS. May be `null` if the SIM cannot be determined or the default was used."
          }
        }
      },
      "SmsSentPayload": {
        "title": "SmsSentPayload",
        "description": "Payload of `sms:sent` event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsEventPayload"
          },
          {
            "type": "object",
            "properties": {
              "sentAt": {
                "type": "string",
                "description": "The timestamp when the SMS message was sent.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "SmsDeliveredPayload": {
        "title": "SmsDeliveredPayload",
        "description": "Payload of `sms:delivered` event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsEventPayload"
          },
          {
            "type": "object",
            "properties": {
              "deliveredAt": {
                "type": "string",
                "description": "The timestamp when the SMS message was delivered.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "SmsFailedPayload": {
        "title": "SmsFailedPayload",
        "description": "Payload of `sms:failed` event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsEventPayload"
          },
          {
            "type": "object",
            "properties": {
              "failedAt": {
                "type": "string",
                "description": "The timestamp when the SMS message failed.",
                "format": "date-time"
              },
              "reason": {
                "type": "string",
                "description": "The reason for the failure."
              }
            }
          }
        ]
      },
      "SystemPingPayload": {
        "type": "object",
        "title": "SystemPingPayload",
        "description": "Payload of `system:ping` event."
      },
      "SmsDataReceivedPayload": {
        "title": "SmsDataReceivedPayload",
        "description": "Payload of `sms:data-received` event.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsEventPayload"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "Base64-encoded content of the SMS message received."
              },
              "receivedAt": {
                "type": "string",
                "description": "The timestamp when the SMS message was received.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "LogEntry": {
        "type": "object",
        "title": "LogEntry",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier for the log entry.",
            "readOnly": true
          },
          "priority": {
            "type": "string",
            "enum": [
              "DEBUG",
              "INFO",
              "WARN",
              "ERROR"
            ],
            "description": "The priority level of the log entry.",
            "readOnly": true
          },
          "module": {
            "type": "string",
            "description": "The module or component of the system that generated the log entry.",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the log event.",
            "readOnly": true
          },
          "context": {
            "type": "object",
            "description": "Additional context information related to the log entry, typically including data relevant to the log event.",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when this log entry was created.",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "Settings": {
        "type": "object",
        "title": "Settings",
        "properties": {
          "encryption": {
            "type": "object",
            "properties": {
              "passphrase": {
                "type": "string",
                "nullable": true,
                "writeOnly": true
              }
            }
          },
          "gateway": {
            "type": "object",
            "description": "*(local mode only)*",
            "properties": {
              "cloud_url": {
                "type": "string",
                "nullable": true
              },
              "private_token": {
                "type": "string",
                "nullable": true,
                "writeOnly": true
              }
            }
          },
          "messages": {
            "type": "object",
            "properties": {
              "send_interval_min": {
                "type": "integer",
                "nullable": true
              },
              "send_interval_max": {
                "type": "integer",
                "nullable": true
              },
              "limit_period": {
                "type": "string",
                "enum": [
                  "Disabled",
                  "PerMinute",
                  "PerHour",
                  "PerDay"
                ]
              },
              "limit_value": {
                "type": "integer",
                "nullable": true
              },
              "sim_selection_mode": {
                "type": "string",
                "enum": [
                  "OSDefault",
                  "RoundRobin",
                  "Random"
                ]
              },
              "log_lifetime_days": {
                "type": "integer",
                "nullable": true
              }
            }
          },
          "ping": {
            "type": "object",
            "properties": {
              "interval_seconds": {
                "type": "integer",
                "nullable": true
              }
            }
          },
          "logs": {
            "type": "object",
            "properties": {
              "lifetime_days": {
                "type": "integer",
                "nullable": true
              }
            }
          },
          "webhooks": {
            "type": "object",
            "properties": {
              "internet_required": {
                "type": "boolean",
                "nullable": true
              },
              "retry_count": {
                "type": "integer",
                "nullable": true
              },
              "signing_key": {
                "type": "string",
                "nullable": true,
                "writeOnly": true
              }
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "title": "Message",
        "description": "For sending messages, only one of `message`, `textMessage` or `dataMessage` should be set. The `message` field is deprecated in favor of the new message types.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the message."
              },
              "phoneNumbers": {
                "type": "array",
                "description": "The recipients' phone numbers in international notation.",
                "items": {
                  "type": "string",
                  "pattern": "^\\+?\\d+$",
                  "maxLength": 16,
                  "example": "+79990001234"
                }
              },
              "simNumber": {
                "type": "integer",
                "nullable": true,
                "description": "The SIM card number; if `null`, the default is used.",
                "minimum": 1,
                "maximum": 3
              },
              "ttl": {
                "type": "integer",
                "nullable": true,
                "description": "The expiration timeout in seconds; conflicts with `validUntil`.",
                "minimum": 5,
                "example": 86400
              },
              "validUntil": {
                "type": "string",
                "nullable": true,
                "description": "The expiration date; conflicts with `ttl`.",
                "format": "date-time"
              },
              "withDeliveryReport": {
                "type": "boolean",
                "description": "Whether to request a delivery report.",
                "default": true
              },
              "isEncrypted": {
                "type": "boolean",
                "description": "Whether the message text and phone numbers are encrypted. See [Encryption Details](https://sms-gate.app/privacy/encryption).",
                "default": false
              },
              "priority": {
                "type": "integer",
                "description": "Message priority; use values >= 100 to ignore limits and delays.",
                "minimum": -128,
                "maximum": 127,
                "default": 0
              },
              "deviceId": {
                "type": "string",
                "nullable": true,
                "description": "Optional device ID for explicit selection",
                "maxLength": 21,
                "example": "PyDmBQZZXYmyxMwED8Fzy"
              }
            },
            "required": [
              "phoneNumbers"
            ]
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message text. This field is deprecated, use `textMessage` instead.",
                    "maxLength": 65535
                  }
                },
                "required": [
                  "message"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "textMessage": {
                    "$ref": "#/components/schemas/TextMessage"
                  }
                },
                "required": [
                  "textMessage"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "dataMessage": {
                    "$ref": "#/components/schemas/DataMessage"
                  }
                },
                "required": [
                  "dataMessage"
                ]
              }
            ]
          }
        ]
      },
      "TextMessage": {
        "type": "object",
        "title": "TextMessage",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "Message text"
          }
        },
        "required": [
          "text"
        ]
      },
      "DataMessage": {
        "type": "object",
        "title": "DataMessage",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "string",
            "description": "Base64-encoded payload",
            "format": "byte"
          },
          "port": {
            "type": "integer",
            "description": "Destination port",
            "minimum": 0,
            "maximum": 65535
          }
        },
        "required": [
          "data",
          "port"
        ]
      },
      "MessageStatus": {
        "type": "object",
        "title": "Message State",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the message.",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "enum": [
              "Pending",
              "Processed",
              "Sent",
              "Delivered",
              "Failed"
            ],
            "description": "The message state.",
            "readOnly": true,
            "default": "Pending"
          },
          "isHashed": {
            "type": "boolean",
            "description": "*(Cloud-only)* Whether the `phoneNumber` is the first 16 characters of the SHA256 hash of the E164 formatted phone number.",
            "readOnly": true,
            "default": false
          },
          "isEncrypted": {
            "type": "boolean",
            "description": "Whether the message text and phone numbers are encrypted. See [Encryption Details](https://sms-gate.app/privacy/encryption).",
            "readOnly": true,
            "default": false
          },
          "recipients": {
            "type": "array",
            "description": "The list of recipients and their states.",
            "items": {
              "$ref": "#/components/schemas/MessageRecipient"
            }
          },
          "states": {
            "type": "object",
            "description": "The history of states for the message.",
            "additionalProperties": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          },
          "deviceId": {
            "type": "string",
            "description": "Device ID",
            "maxLength": 21,
            "readOnly": true,
            "example": "PyDmBQZZXYmyxMwED8Fzy"
          }
        },
        "required": [
          "id",
          "state",
          "isHashed",
          "isEncrypted",
          "deviceId"
        ]
      },
      "MessageRecipient": {
        "type": "object",
        "title": "Message Recipient State",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "The recipient's phone number in international notation.",
            "maxLength": 16,
            "readOnly": true,
            "example": "+79990001234"
          },
          "state": {
            "type": "string",
            "enum": [
              "Pending",
              "Processed",
              "Sent",
              "Delivered",
              "Failed"
            ],
            "description": "The state of the recipient.",
            "readOnly": true
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "The error message if the state is `Failed`.",
            "readOnly": true
          }
        }
      }
    }
  },
  "security": [
    {
      "BasicAuth": []
    }
  ]
}